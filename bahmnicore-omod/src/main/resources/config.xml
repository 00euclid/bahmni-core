<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//OpenMRS//DTD OpenMRS Config 1.0//EN" "http://resources.openmrs.org/doctype/config-1.2.dtd">

<module configVersion="1.2">
	
    <!-- Base Module Properties -->
    <id>@MODULE_ID@</id>
    <name>@MODULE_NAME@</name>
    <version>@MODULE_VERSION@</version>
    <package>@MODULE_PACKAGE@</package>
    <author>Bahmni</author>
    <description>
        Provides core BahmniEMR services
    </description>
    <activator>@MODULE_PACKAGE@.Activator</activator>

    <updateURL>https://example.com/modules/download/bahmnicore/update.rdf</updateURL>
    <!-- /Base Module Properties -->
	
    <require_version>${openMRSRuntimeVersion}</require_version>
    <require_modules>
        <require_module>org.openmrs.module.webservices.rest</require_module>
        <require_module>org.openmrs.module.idgen</require_module>
        <require_module>org.openmrs.module.emrapi</require_module>
    </require_modules>
    <!-- Extensions -->
	
    <!-- AOP -->
    <!-- Required Privileges -->
    
    <privilege>
        <name>Add Patient Lists</name>
        <description>Ability to create patient lists</description>
    </privilege>
    <privilege>
        <name>Delete Patient Lists</name>
        <description>Ability to delete patient lists</description>
    </privilege>
    <privilege>
        <name>Edit Patient Lists</name>
        <description>Ability to edit patient lists</description>
    </privilege>
    <privilege>
        <name>View Patient Lists</name>
        <description>Ability to view patient lists</description>
    </privilege>
    
    <privilege>
        <name>Add Drug Groups</name>
        <description>Ability to create Drug Groups</description>
    </privilege>
    <privilege>
        <name>Delete Drug Groups</name>
        <description>Ability to delete Drug Groups</description>
    </privilege>
    <privilege>
        <name>Edit Drug Groups</name>
        <description>Ability to edit Drug Groups</description>
    </privilege>
    <privilege>
        <name>View Drug Groups</name>
        <description>Ability to view Drug Groups</description>
    </privilege>   
    
    <privilege>
        <name>Add Drug Info</name>
        <description>Ability to create Drug Info</description>
    </privilege>
    <privilege>
        <name>Delete Drug Info</name>
        <description>Ability to delete Drug Info</description>
    </privilege>
    <privilege>
        <name>Edit Drug Info</name>
        <description>Ability to edit Drug Info</description>
    </privilege>
    <privilege>
        <name>View Drug Info</name>
        <description>Ability to view Drug Info</description>
    </privilege>   
    
    <!-- Required Global Properties -->
    <!-- DWR -->
    <!-- Servlets -->
    <!-- Filters -->
	
    <!-- Internationalization -->
    <!-- All message codes should start with moduleId.* -->
    <messages>
        <lang>en</lang>
        <file>messages.properties</file>
    </messages>

    <globalProperty>
        <property>emrapi.sqlSearch.activePatients</property>
        <defaultValue>select distinct concat(pn.given_name, pn.family_name) as name, pi.identifier as identifier, concat("",p.uuid) as uuid, concat("",v.uuid) as activeVisitUuid from visit v join person_name pn on v.patient_id = pn.person_id and pn.voided = 0 join patient_identifier pi on v.patient_id = pi.patient_id join person p on p.person_id = v.patient_id where v.date_stopped is null</defaultValue>
        <description>
            Sql query to get list of active patients
        </description>
    </globalProperty>

    <globalProperty>
        <property>emrapi.sqlSearch.patientsToAdmit</property>
        <defaultValue>select distinct concat(pn.given_name, pn.family_name) as name, pi.identifier as identifier, concat("",p.uuid) as uuid, concat("",v.uuid) as activeVisitUuid from visit v join person_name pn on v.patient_id = pn.person_id and pn.voided = 0 join patient_identifier pi on v.patient_id = pi.patient_id join person p on v.patient_id = p.person_id join encounter e on v.visit_id = e.visit_id join obs o on e.encounter_id = o.encounter_id join concept c on o.value_coded = c.concept_id join concept_name cn on c.concept_id = cn.concept_id where v.date_stopped is null and cn.name = 'Admit Patient' and v.patient_id not in (select patient_id from bed_patient_assignment_map where date_stopped is null)</defaultValue>
        <description>
            Sql query to get list of patients to be admitted
        </description>
    </globalProperty>

    <globalProperty>
        <property>emrapi.sqlSearch.admittedPatients</property>
        <defaultValue>select distinct concat(pn.given_name, pn.family_name) as name, pi.identifier as identifier, concat("",p.uuid) as uuid, concat("",v.uuid) as activeVisitUuid from bed_patient_assignment_map bp join visit v on bp.patient_id=v.patient_id and v.date_stopped is null join person_name pn on bp.patient_id = pn.person_id and pn.voided = 0 join patient_identifier pi on bp.patient_id = pi.patient_id join person p on p.person_id = bp.patient_id where bp.date_stopped is null</defaultValue>
        <description>
            Sql query to get list of admitted patients
        </description>
    </globalProperty>

    <globalProperty>
        <property>emrapi.sqlSearch.patientsToDischarge</property>
        <defaultValue>select distinct concat(pn.given_name, pn.family_name) as name, pi.identifier as identifier, concat("",p.uuid) as uuid, concat("",v.uuid) as activeVisitUuid from visit v join person_name pn on v.patient_id = pn.person_id and pn.voided = 0 join patient_identifier pi on v.patient_id = pi.patient_id join person p on v.patient_id = p.person_id join encounter e on v.visit_id = e.visit_id join obs o on e.encounter_id = o.encounter_id join concept c on o.value_coded = c.concept_id join concept_name cn on c.concept_id = cn.concept_id where v.date_stopped is null and cn.name = 'Discharge Patient'</defaultValue>
        <description>
            Sql query to get list of patients to discharge
        </description>
    </globalProperty>

      <globalProperty>
        <property>emrapi.sqlSearch.patientsHasPendingOrders</property>
        <defaultValue>select distinct concat(pn.given_name, pn.family_name) as name, pi.identifier as identifier, 
        concat("",p.uuid) as uuid, concat("",v.uuid) as activeVisitUuid
        from visit v 
        join person_name pn on v.patient_id = pn.person_id and pn.voided = 0 
        join patient_identifier pi on v.patient_id = pi.patient_id join person p on p.person_id = v.patient_id 
        join orders on orders.patient_id = v.patient_id 
        join order_type on orders.order_type_id = order_type.order_type_id and order_type.name != 'Lab Order' and order_type.name != 'Drug Order'
        where v.date_stopped is null and order_id not in(select obs.order_id from obs where person_id = pn.person_id and order_id = orders.order_id)</defaultValue>
        <description>
            Sql query to get list of patients who has pending orders.
        </description>
    </globalProperty>

    


</module>
